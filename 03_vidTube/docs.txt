step1 : go to app.js and make an app using express() and export this

step2 : now go to index.js and import that app from app.js
      i  app.listen etc.
      ii import dotenv from dotenv
step3 : go to pachage.json and write start command for starting application        

step4 : create .eve and .env.sample files
    i    write port on .env
    ii   install dotenv which : Dotenv is a zero-dependency module that loads       environment variables from a .env file into process.env

step 5 : install cors package which : CORS is a node.js package for providing a Connect/Express middleware that can be used to enable CORS with various options.

# use middlewares in index.js which are cors middleware alongwith express middlewares
# go to db/index.js and try to connect mongoDB using mongoose and MongoDB Atlas
# now we are going to utils and create asyncHandler.js witch has a asyncHandler to handle metods like get, post, put, delete etc asyncronously
# now go to utils and create a new file named ApiResponse.js to get standard skeleton for api response
# now go to utils and create a new file named ApiError.js to handle Erors and make a standard skeleton for api errors
        *****104 Healthcheck routes and testing with postman ******
# Healthcheck is a professional way to check the health of routes before send it to production
# For this purpose goto controllers and make a file named healthCheck.contollers.js which will 
# now go to the routes folder and make a file named healthcheck.router.js to make a route for healthcheck
********105 A guide to build models in MongoDB with aggregation plugin*******
# first go to models folder and create models in it
    ******** 106 Hooks and methods in mongoose with JWT *************
# first of all go to mongoose site and search middwares and read it
# search methods also and read it
# go to models/userModel and lets handle the things 
# install npm package bcrypt for password encryption
# go to models/userModel and import bcrypt and inject it on user password
# now on remainig in that file use methods to compare passwords 
# now we want to create access token and refresh token to check whether the user is logged in or not 
# for this purpose install a package named jwt token
# now go to userModel and generate refresh/access token
    *****107 How to handle files in MERN application*****
# The scenerio is that when we want upload our files like photos or media on our sever we send them to that folder on our sever
# But most of the cases we send these files 3rd party apps like cloudinary and many more.
# But now we will use cloudinary in this section or project
# There is no file system in express to handle cookies 
# For this purpose we will use cookie-parser
# Now firstly we install cookie-parser package in our project
# There is no option in express to handle  the images 
# For this purpose another package is available named multer
# now we will install this package to handling the multiple|sigle files
# To use multer we create a file in middlewares named multer.middlewares.js
# Now go to the cloudinary site and install cloudinary
# Now copy cloudinayName, cloudinarySecret, cloudinaryApikey and paste these in .env file
# Now perform the method from cloudinary to handle files 
# In this snippet of code import fs from express
# fs is specially here to delete that file while error catch party
#     